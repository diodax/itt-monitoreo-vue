{
  "_args": [
    [
      {
        "raw": "vue-cli@^2.8.1",
        "scope": null,
        "escapedName": "vue-cli",
        "name": "vue-cli",
        "rawSpec": "^2.8.1",
        "spec": ">=2.8.1 <3.0.0",
        "type": "range"
      },
      "/vagrant/node_modules/sails-generate-frontend-webpack-vue"
    ]
  ],
  "_from": "vue-cli@>=2.8.1 <3.0.0",
  "_id": "vue-cli@2.8.2",
  "_inCache": true,
  "_location": "/vue-cli",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/vue-cli-2.8.2.tgz_1494898881013_0.2792513573076576"
  },
  "_npmUser": {
    "name": "yyx990803",
    "email": "yyx990803@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-cli@^2.8.1",
    "scope": null,
    "escapedName": "vue-cli",
    "name": "vue-cli",
    "rawSpec": "^2.8.1",
    "spec": ">=2.8.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sails-generate-frontend-webpack-vue",
    "/sails-generate-webpack-vue"
  ],
  "_resolved": "https://registry.npmjs.org/vue-cli/-/vue-cli-2.8.2.tgz",
  "_shasum": "27e81510c79f82ffd4af52c8ace4764a34fe1abd",
  "_shrinkwrap": null,
  "_spec": "vue-cli@^2.8.1",
  "_where": "/vagrant/node_modules/sails-generate-frontend-webpack-vue",
  "author": {
    "name": "Evan You"
  },
  "bin": {
    "vue": "bin/vue",
    "vue-init": "bin/vue-init",
    "vue-list": "bin/vue-list",
    "vue-build": "bin/vue-build"
  },
  "bugs": {
    "url": "https://github.com/vuejs/vue-cli/issues"
  },
  "dependencies": {
    "async": "^2.0.0-rc.2",
    "autoprefixer": "^6.6.1",
    "babel-core": "^6.21.0",
    "babel-loader": "^6.2.10",
    "babel-preset-vue-app": "^0.4.0",
    "chalk": "^1.1.1",
    "commander": "^2.9.0",
    "connect-history-api-fallback": "^1.3.0",
    "consolidate": "^0.14.0",
    "copy-webpack-plugin": "^4.0.1",
    "css-loader": "^0.26.1",
    "download-git-repo": "^0.2.1",
    "express": "^4.14.0",
    "extract-text-webpack-plugin": "^2.0.0-rc.3",
    "file-loader": "^0.9.0",
    "friendly-errors-webpack-plugin": "^1.1.2",
    "handlebars": "^4.0.5",
    "html-webpack-plugin": "^2.26.0",
    "http-proxy-middleware": "^0.17.3",
    "inquirer": "^0.12.0",
    "installed-by-yarn-globally": "^0.1.1",
    "metalsmith": "^2.1.0",
    "minimatch": "^3.0.0",
    "multimatch": "^2.1.0",
    "opn": "^4.0.2",
    "ora": "^0.2.1",
    "post-compile-webpack-plugin": "^0.1.0",
    "postcss-loader": "^1.2.1",
    "read-metadata": "^1.0.0",
    "request": "^2.67.0",
    "rimraf": "^2.6.1",
    "semver": "^5.1.0",
    "tildify": "^1.2.0",
    "url-loader": "^0.5.7",
    "user-home": "^2.0.0",
    "validate-npm-package-name": "^2.2.2",
    "vue": "^2.1.10",
    "vue-loader": "^10.0.2",
    "vue-template-compiler": "^2.1.10",
    "webpack": "^2.2.0",
    "webpack-dev-middleware": "^1.9.0",
    "webpack-hot-middleware": "^2.15.0",
    "webpack-merge": "^2.3.1"
  },
  "description": "A simple CLI for scaffolding Vue.js projects.",
  "devDependencies": {
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-stage-2": "^6.22.0",
    "chai": "^3.5.0",
    "cross-env": "^1.0.7",
    "eslint": "^2.7.0",
    "eslint-config-standard": "^5.1.0",
    "eslint-plugin-promise": "^1.1.0",
    "eslint-plugin-standard": "^1.3.2",
    "execa": "^0.5.0",
    "mocha": "^2.4.5"
  },
  "directories": {},
  "dist": {
    "shasum": "27e81510c79f82ffd4af52c8ace4764a34fe1abd",
    "tarball": "https://registry.npmjs.org/vue-cli/-/vue-cli-2.8.2.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "53479e04315a3b8d478c3436070231182ab0c79b",
  "homepage": "https://github.com/vuejs/vue-cli#readme",
  "keywords": [
    "vue",
    "cli",
    "spa"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "rem",
      "email": "0x142857@gmail.com"
    },
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    },
    {
      "name": "zigomir",
      "email": "zigomir@gmail.com"
    }
  ],
  "name": "vue-cli",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "# vue-cli [![Build Status](https://img.shields.io/circleci/project/vuejs/vue-cli/master.svg)](https://circleci.com/gh/vuejs/vue-cli) [![npm package](https://img.shields.io/npm/v/vue-cli.svg)](https://www.npmjs.com/package/vue-cli)\n\nA simple CLI for scaffolding Vue.js projects.\n\n### Installation\n\nPrerequisites: [Node.js](https://nodejs.org/en/) (>=4.x, 6.x preferred), npm version 3+ and [Git](https://git-scm.com/).\n\n``` bash\n$ npm install -g vue-cli\n```\n\n### Usage\n\n``` bash\n$ vue init <template-name> <project-name>\n```\n\nExample:\n\n``` bash\n$ vue init webpack my-project\n```\n\nThe above command pulls the template from [vuejs-templates/webpack](https://github.com/vuejs-templates/webpack), prompts for some information, and generates the project at `./my-project/`.\n\n### vue build\n\nUse vue-cli as a zero-configuration development tool for your Vue apps and component, check out the [docs](/docs/build.md).\n\n### Official Templates\n\nThe purpose of official Vue project templates are to provide opinionated, battery-included development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to Vue.js.\n\nAll official project templates are repos in the [vuejs-templates organization](https://github.com/vuejs-templates). When a new template is added to the organization, you will be able to run `vue init <template-name> <project-name>` to use that template. You can also run `vue list` to see all available official templates.\n\nCurrent available templates include:\n\n- [webpack](https://github.com/vuejs-templates/webpack) - A full-featured Webpack + vue-loader setup with hot reload, linting, testing & css extraction.\n\n- [webpack-simple](https://github.com/vuejs-templates/webpack-simple) - A simple Webpack + vue-loader setup for quick prototyping.\n\n- [browserify](https://github.com/vuejs-templates/browserify) - A full-featured Browserify + vueify setup with hot-reload, linting & unit testing.\n\n- [browserify-simple](https://github.com/vuejs-templates/browserify-simple) - A simple Browserify + vueify setup for quick prototyping.\n\n- [simple](https://github.com/vuejs-templates/simple) - The simplest possible Vue setup in a single HTML file\n\n### Custom Templates\n\nIt's unlikely to make everyone happy with the official templates. You can simply fork an official template and then use it via `vue-cli` with:\n\n``` bash\nvue init username/repo my-project\n```\n\nWhere `username/repo` is the GitHub repo shorthand for your fork.\n\nThe shorthand repo notation is passed to [download-git-repo](https://github.com/flipxfx/download-git-repo) so you can also use things like `bitbucket:username/repo` for a Bitbucket repo and `username/repo#branch` for tags or branches.\n\nIf you would like to download from a private repository use the `--clone` flag and the cli will use `git clone` so your SSH keys are used.\n\n### Local Templates\n\nInstead of a GitHub repo, you can also use a template on your local file system:\n\n``` bash\nvue init ~/fs/path/to-custom-template my-project\n```\n\n### Writing Custom Templates from Scratch\n\n- A template repo **must** have a `template` directory that holds the template files.\n\n- A template repo **may** have a metadata file for the template which can be either a `meta.js` or `meta.json` file. It can contain the following fields:\n\n  - `prompts`: used to collect user options data;\n\n  - `filters`: used to conditional filter files to render.\n  \n  - `metalsmith`: used to add custom metalsmith plugins in the chain.\n\n  - `completeMessage`: the message to be displayed to the user when the template has been generated. You can include custom instruction here.\n\n  - `complete`: Instead of using `completeMessage`, you can use a function to run stuffs when the template has been generated.\n\n#### prompts\n\nThe `prompts` field in the metadata file should be an object hash containing prompts for the user. For each entry, the key is the variable name and the value is an [Inquirer.js question object](https://github.com/SBoudrias/Inquirer.js/#question). Example:\n\n``` json\n{\n  \"prompts\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"message\": \"Project name\"\n    }\n  }\n}\n```\n\nAfter all prompts are finished, all files inside `template` will be rendered using [Handlebars](http://handlebarsjs.com/), with the prompt results as the data.\n\n##### Conditional Prompts\n\nA prompt can be made conditional by adding a `when` field, which should be a JavaScript expression evaluated with data collected from previous prompts. For example:\n\n``` json\n{\n  \"prompts\": {\n    \"lint\": {\n      \"type\": \"confirm\",\n      \"message\": \"Use a linter?\"\n    },\n    \"lintConfig\": {\n      \"when\": \"lint\",\n      \"type\": \"list\",\n      \"message\": \"Pick a lint config\",\n      \"choices\": [\n        \"standard\",\n        \"airbnb\",\n        \"none\"\n      ]\n    }\n  }\n}\n```\n\nThe prompt for `lintConfig` will only be triggered when the user answered yes to the `lint` prompt.\n\n##### Pre-registered Handlebars Helpers\n\nTwo commonly used Handlebars helpers, `if_eq` and `unless_eq` are pre-registered:\n\n``` handlebars\n{{#if_eq lintConfig \"airbnb\"}};{{/if_eq}}\n```\n\n##### Custom Handlebars Helpers\n\nYou may want to register additional Handlebars helpers using the `helpers` property in the metadata file. The object key is the helper name:\n\n``` js\nmodule.exports = {\n  helpers: {\n    lowercase: str => str.toLowerCase()\n  }\n}\n```\n\nUpon registration, they can be used as follows:\n\n``` handlebars\n{{ lowercase name }}\n```\n\n#### File filters\n\nThe `filters` field in the metadata file should be an object hash containing file filtering rules. For each entry, the key is a [minimatch glob pattern](https://github.com/isaacs/minimatch) and the value is a JavaScript expression evaluated in the context of prompt answers data. Example:\n\n``` json\n{\n  \"filters\": {\n    \"test/**/*\": \"needTests\"\n  }\n}\n```\n\nFiles under `test` will only be generated if the user answered yes to the prompt for `needTests`.\n\nNote that the `dot` option for minimatch is set to `true` so glob patterns would also match dotfiles by default.\n\n#### Skip rendering\n\nThe `skipInterpolation` field in the metadata file should be a [minimatch glob pattern](https://github.com/isaacs/minimatch). The files matched should skip rendering. Example:\n\n``` json\n{\n  \"skipInterpolation\": \"src/**/*.vue\"\n}\n```\n\n#### Metalsmith\n\n`vue-cli` uses [metalsmith](https://github.com/segmentio/metalsmith) to generate the project.\n\nYou may customize the metalsmith builder created by vue-cli to register custom plugins.\n\n```js\n{\n  \"metalsmith\": function (metalsmith, opts, helpers) {\n    function customMetalsmithPlugin (files, metalsmith, done) {\n      // Implement something really custom here.\n      done(null, files)\n    }\n    \n    metalsmith.use(customMetalsmithPlugin)\n  }\n}\n```\n\nIf you need to hook metalsmith before questions are asked, you may use an object with `before` key.\n\n```js\n{\n  \"metalsmith\": {\n    before: function (metalsmith, opts, helpers) {},\n    after: function (metalsmith, opts, helpers) {}\n  }\n}\n```\n\n#### Additional data available in meta.{js,json}\n\n- `destDirName` - destination directory name\n\n```json\n{\n  \"completeMessage\": \"To get started:\\n\\n  cd {{destDirName}}\\n  npm install\\n  npm run dev\"\n}\n```\n\n- `inPlace` - generating template into current directory\n\n```json\n{\n  \"completeMessage\": \"{{#inPlace}}To get started:\\n\\n  npm install\\n  npm run dev.{{else}}To get started:\\n\\n  cd {{destDirName}}\\n  npm install\\n  npm run dev.{{/inPlace}}\"\n}\n```\n\n### `complete` function\n\nArguments:\n\n- `data`: the same data you can access in `completeMessage`:\n  ```js\n  {\n    complete (data) {\n      if (!data.inPlace) {\n        console.log(`cd ${data.destDirName}`)\n      }\n    }\n  }\n  ```\n\n- `helpers`: some helpers you can use to log results.\n  - `chalk`: the `chalk` module\n  - `logger`: [the built-in vue-cli logger](/lib/logger.js)\n  - `files`: An array of generated files\n  ```js\n  {\n    complete (data, {logger, chalk}) {\n      if (!data.inPlace) {\n        logger.log(`cd ${chalk.yellow(data.destDirName)}`)\n      }\n    }\n  }\n  ```\n\n### Installing a specific template version\n\n`vue-cli` uses the tool [`download-git-repo`](https://github.com/flipxfx/download-git-repo) to download the official templates used. The `download-git-repo` tool allows you to indicate a specific branch for a given repository by providing the desired branch name after a pound sign (`#`).\n\nThe format needed for a specific official template is:\n\n```\nvue init '<template-name>#<branch-name>' <project-name>\n```\n\nExample:\n\nInstalling the [`1.0` branch](https://github.com/vuejs-templates/webpack-simple/tree/1.0) of the webpack-simple vue template:\n\n```\nvue init 'webpack-simple#1.0' mynewproject\n```\n\n_Note_: The surrounding quotes are necessary on zsh shells because of the special meaning of the `#` character.\n\n\n### License\n\n[MIT](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vue-cli.git"
  },
  "scripts": {
    "e2e": "rimraf test/e2e/mock-template-build && cross-env BABEL_ENV=development mocha test/e2e/test.js --slow 1000 --compilers js:babel-core/register",
    "e2e:build": "cross-env BABEL_ENV=development mocha test/e2e/test-build.js --timeout 60000 --compilers js:babel-core/register",
    "lint": "eslint test/e2e/test*.js lib bin/* --env mocha",
    "test": "npm run lint && npm run e2e && npm run e2e:build"
  },
  "version": "2.8.2"
}
